클래스 상속이란?
현실에서의 상속은 부모가 자식을 선택해서 물려주지만,
객체지향프로그램에서는 자식이 부모를 선택한다. (부모의 필드에 대한 공유 요청)
class 자식 extends 부모(0)

자바는 다중상속을 허용하지 않는다.
여러개의 부모 클래스를 상속할 수 없다.
class 자식 extends 부모1, 부모2,부모3 (x)


부모 생성자 호출
자바에서는 자식 객체를 생성하면 부모객체가 먼저 생성된 다음에 자식 객체가 생성된다.

Phone 객체가 생성되고, SmartPhone 객체가 생성된 것이다.

모든 객체는 생성자를 호출해야만 메모리가 생성된다.


7.4 메소드 오버라이딩(메소드 재정의) : Method Overriding
    상속된 메소드를 서브클래스에서 재정의하는 것을 의미한다.
    해당 슈퍼클래스(부모)의 메소드는 숨겨지고, 서브 (자식) 메소드가 우선적으로 사용된다.

    규칙:
    조건: 부모의 시그니처 그대로 사용해야 한다. (리턴타입, 메소드 이름, 매개변수) 동일해야 한다.
          접근 제한을 더 강하게 오버라이딩 할 수 없다. (public -> private (X))



7.5  final 클래스 , final 메서드

     필드 선언시 final : 상수 초기값을 설정 후 값을 변경할 수 없다.
     클래스 선언시 final :  최종 클래스이므로 더 이상 상속 할 수 없는 클래스가 된다.  extends 불가 자식클래스 없음
     메소드 선언시 final :  최종 메소드이므로 더 이상 오버라이딩 할 수 없다.
                          부모 클래스에서 가지고 있는 메소드에 final시키면 자식클래스에서 재정의하여 사용할 수 없다.


7.6 Protected 접근 제한자

   - 같은 패키지 내에서의 protected 의 접근 A , B 클래스

   - 다른 패키지에서의 protected의 접근은 자식생성자인 D클래스의 생성자에서 super()로 A 생성자를 통해서
     A의 자식 클래스이므로 A의 protected 필드, 생성자, 메소드에 접근 할 수 있다.
     즉 new 연산자를 사용해서 생성자를 직접 호출은 불가 하다.


7.7  클래스 타입의 자동 타입 변환  : 그대로 자동적으로 타입 변환이 일어나는 것 .
     자식은 부모의 필드와 메소드를 상속받기 때문에 부모와 동일하게 취급될 수 있다.
     고양이가 동물의 특징과 기능을 상속받았다면, '고양이는 동물이다.' 성립된다.

7.8  강제타입변환
     자식타입은 부모타입으로 자동변환되지만,
     부모타입은 자식타입으로 자동변환 않는다.

     자식타입 변수  =(자식타입) 부모타입객체;   ()캐스팅연산자 => 강제 타입변환
     Parent p = new Child();
     Child c = (Child) p;

     자식 객체가 부모타입으로 자동변환하면 부모타입에 선언된 필드와 메서드만 사용가능하다는 제약사항이 따른다.
     만약 자식타입에 선언된 필드와 메서드가 필요하다면 강제 타입변환을 하여 다시 자식 타입으로 변환해야만
     자식타입에서 제공하는 필드를 사용할 수 있다.


7.9  다형성
     사용방법은 동일하지만 실행 결과 다양하게 나오는 성질
     자동차의 부품을 교환하면 성능이 다양하게 나온다. 즉 객체는 부품(Component)이라고 보자
     프로그램을 구성할때 객체를 바꾸면 프로그램의 실행 성능이 달라진다.

     "객체사용 방법이 동일하다"  문장의 의미 ==> 동일한 메소드를 가지고 있다.

     필드 다형성

     매개변수 다형성  : 필드보다는 메소드를 호출할때 발생한다. 메소드가 클래스 타입의 매개변수를 가지고 있을 경우, 호출 시 동일한 타입의 객체를
                     제공하는 것이 옳지만, 자식 객체를 제공할 수 도 있다.




7.10  객체 타입 확인    : 연산자 instanceof  (객체 타입 비교 연산자)
      매개변수의 다형성에서 실제로 어떤 객체가 매개값으로 제공되었는지의 여부를 확인해야 한다.

       boolean result = 객체 instanceof 타입;

       public void method(Parent parent){
           if(parent instanceof Child){
              Child child = (Child) parent;
           }
        }

        java12 부터
          public void method(Parent parent){
                    if(parent instanceof Child child){
                         child.method3();
                    }
                 }


7.11 추상클래스
    추상(abstract)은 실체 간에 공통되는 특성을 추출하는 과정을 뜻한다.
    공통되는 특성 => 공통적인 필드 나 메소드를 추출해서 선언한 클래스를 추상 클래스라 한다.
    추상 클래스는 실체 클래스의 부모 역할을 한다.
    실체 클래스는 추상 클래스를 상속해서 공통적인 필드나 메소드를 물려받아 사용할 수 있다.

    Animal  animal = new Animal(); (X)  추상클래스는 인스턴스 (메모리 할당)할 수 없다.
    추상클래스는 새로운 실체 클래스를 만들기 위한 부모클래스로만 사용된다.

    public abstract class 클래스명 {} 선언한다.





