8.1 인터페이스 (interface)
   두 장치를 연결하는 접속 도구
   서로 다른 객체를 연결하는 역할을 하는 객체

  사용하는 의미
  - loose coupling (느슨한 결합) 관계를 위해 사용한다.
    다중 상속을 구현할 수 있다.

    public class Cat extends Animal implements sound,eat,sleep

8.2 인터페이스도 하나의 타입이므로 변수의 타입으로 사용할 수 있다.
    인터페이스는 참조타입이다.
    인터페이스 변수에는 객체의 참조값을 저장할 수 있다.
    null 초기값

    RemtoeControl rc = null;
    rc = new Television();
    rc.turnOff();
    rc.turnOn();

    ========================
    rc = new Cleaner();
    rc.turnOff();   //rc 고유기능
    rc.turnOn();    //rc 고유기능
    rc.cleaning();  //Cleaner의 기능
    ========================
이름 명명방식
- 파스칼 방식  : 클래스    PersonInfo
- 카멜 방식    : 메소드    setAge()
- 스네이크 방식 : 상수     MAX_VALUE

8.3 상수필드
    public static final 특징을 가지고 있는 필드(상수) 선언가능


8.4 default method
    상수 필드를 읽거나, 추상 메소드를 호출하는 코드를 작성할때


8.5 정적 메소드
    추상메소드와 디폴트메소드는 구현객체가 필요하다.
    정적메소드는 구현 객체가 없어도 인터페이스만으로 호출할 수 있다.
    정적 필드, private 정적 메소드 호출가능


8.6 private 메소드
    인터페이스의 구성요소인 상수필드, 추상메소드, 디폴트 메소드,정적 메소드는 모두 public을 가져야 한다.
    인터페이스의 public의 의미는 외부에서 누구나 호출, 접근 할 수 있다 라는 의미이다.

    외부에서 접근 할 수없는 기능으로 선언할 수 있다. private 메소드를 허용

     1. private 메소드  (구현 객체가 필요한 메소드)
        디폴트 메소드 안에서만 호출이 가능
     2. private static 메소드 (구현 객체가 필요 없는 메소드)


8.7 다중 인터페이스
    구현객체는 여러개의 인터페이스를  implements (기능을 내 맞추어서 재정의 해야 만 한다.)

8.8 인터페이스 상속
    인터페이스도 다른 인터페이스를 상속(extends)할 수 있다.
    클래스와 달리 다중 상속을 허용한다.

    public interface 자식인터페이스 extends 부모인터1, 부모인터2{...}











