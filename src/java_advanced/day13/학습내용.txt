인터페이스는 구현할 기능에 대한 일반화

public class 구현클래스명 implements interfaceA, interfaceB....{}

public class AAA extends AAAB implements 날다,먹다,소리내다{}
AAA 라는 클래스는  AAAB라는 클래스의 필드와 기능을 공유할 있고,
날고, 먹고, 소리내는 기능을 사용할 수 있다.
날고, 먹고, 소리내는 기능은 AAA 에 맞도록 구현 반드시 해주어야 한다.

- 상수필드 public static final
- 추상메소드  public 리턴유형 메소드명();
- 디폴트 메소드  : 유일한 구현메소드
- private 메소드
  private 메소드
  private static 메소드
- static 메소드
==========================================
인터페이스는 구현
public class 구현클래스명 implements interfaceA, interfaceB....{}

인터페이스 상속
interface A  extends B, C,.....{}

public class 구현 클래스 implements A {}
public class 구현 클래스 implements A,B,C.... {}

======================================
타입변환
인터페이스와 구현 클래스간에 발생한다.
인터페이스 변수에 구현 객체를 대입하면
구현 객체는 인터페이스 타입으로 자동타입 변환된다.

인터페이스 변수 = 구현객체;
RemoteControl rc = new SmartTelevision();
SmartTelevision 이 자동으로  RemoteControl 타입 변환으로 변환되었다.

=======================================
강제타입변환
() ==> 캐스팅 기호를 사용해서 인터페이스 타입을 구현 클래스 타입으로 변환가능하다
구현 클래스  변수 =(구현클래스)인터페이스 변수
구현 객체가 인터페이스 타입으로 자동변환되면
인터페이스에 선언된 메소드만 사용 가능하다
자동타입 변환후에 구현클래스의 메소드를 모두 사용하고 싶다면
캐스팅 기호를 통해 구현클래스로 강제타입 변환해야 한다.
-------------------------------------
다형성 제공   (타입체크)
현업에서는 주로 상속보다는 인터페이스를 통한 다형성을 구현한다.

다형성 ==> 사용방법은 동일하지만 다양한 결과가 나오는 성질
인터페이스의 추상메소드 = > 구현 클래스의 재정의
재정의된 내용은 구현 클래스마다 다르다.

결론)
구현 객체는 인터페이스 타입으로 자동 타입 변환되고
인터페이스 메소드 호출 시 구현객체의 재정의된 메소드가 호출되어
다양한 실행 결과를 얻을 수 있다.

======================================
예외처리
자바에서 오류란(error)
컴퓨터 하드웨어의 고장으로 인하여 응용프로그램 실행 오류를 발생하는 것. 개발자는 할일이 없다.

자바에서 오류(error)를 제외한 오류를 예외(Exception) 라 한다. 개발자가 해결해야 하는 오류
예외가 발생하면 프로그램은 곧바로 종료되는 점은 에러와 동일하지만
예외처리를 통하여 계속 실행 상태를 유지할 수 있다.

Exception (예외)
 - 일반예외 (Exception)
   컴파일러가 예외 처리 코드 여부를 검사하는 예외
 - 실행예외 (Runtime Exception)
   컴파일러가 예외 처리 여부를 검사하지 않는 예외

   자바는 예외가 발생하면 예외 클래스로부터 객체를 생성한다.
   해당 예외 객체가 예외 처리시 사용된다.

   자바의 모든 에러와 예외클래스는 Throwable을 상속받아 만들어지고,
   추가적으로 예외 클래스는 java.lang.Exception 클래스를 상속한다.

   실행예외는 RuntimeException 과 그 subclass에 해당하는데
   자바는 자주 사용되는 예외 클래스를 java.lang 즉
   표준 라이브러리로 제공한다.

---------------------------------------------
자바는 예외처리시
문제가 발생할 수 있는 문장들을
try 블럭으로 묶어놓고
예외발생 시  예외를 처리하고 프로그램이 정상 종료 될 수 있도록 처리해야 한다.
try - catch
try - catch -finally

//예외 처리 방법
//1. try-catch 블럭
//2. throws 던져서 처리






=======================================








