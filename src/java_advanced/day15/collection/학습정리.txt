1.List 인터페이스
  인덱스를 이용하여 저장순서를 유지한다.
2.Set 인터페이스
  저장 순서를 유지 하지 않는다.
  객체를 중복하여 저장하지 않는다.
  하나의 null만 저장할 수 있다.

  구슬주머니와 같다. 동일한 구슬을 두 개 넣을 수 없다.
  저장할때와 나올때의 순서가 다를 수 있기 때문이다.

  HashSet 클래스를 가장 많이 사용한다.

  Set<E> set = new HashSet<>();
  Set set1 = new HashSet<>();

  동일한 객체(동등객체)는 저장하지 않는다.
  동등객체를 판단하는 방법을 알야야 한다.
  hashCode(0) -> equals(x) -> 저장하지 않는다
  hashCode(x) -> 저장하지 않는다

  Set 컬렉션은 인덱스로 객체로 검색하여 가져오는 메소드가 없다.
  객체를 한개씩 반복해서 가져와야 하는데
  for문을 이용하는 방법과 iterator 방법 2가지가 있다

  Set<E> set = new HahsSet<>();
  for(E e : set) {}

  Set<E> set = new HahsSet<>();
  Iterator<E> iterator = set.iterator();

  while(iterator.hasNext()){   //hasNext() 주머니에 가져올 객체기 있는지 여부 확인
         E e = iterator.next();     //next() 객체를 꺼내온다.
                       .remove();   // 객체 삭제
  }

트리 (Tree)
트리 : Node(노드, 데이터저장), Branch (가지, 브랜치)를 이용해서 , 사이클이 이루지 않도록 구성된 데이터 구조
1. Node : 트리에서 데이터를 저장하는 기본 요소 (데이터와 다른 연결된 노드에 대한 Branch 정보 포함)
2. RootNode : 트리에서 맨 위의 시작 노드
3. Level(Depth) : 최상위 노드를 level0 으로 하였을때, 하위 Branch로 연결된 노드의 깊이를 나타냄
4. Parent Node(부모노드) : 어떤 노드의 위 level 노드
5. Child Node(자식노드)
6. leaf Node(Terminal Node) : Child Node 가 하나도 없는 노드
7. Sibling(Brother Node) : 형제 노드 , 동일한 Parent Node 를 가진 노드


이진트리 와 이진 탐색 트리 (Binary Search Tree)
이진트리 : 노드의 최대 Branch 가 2인 트리
이진탐색 트리 (BST):이진 트리에 왼쪽 노드는 해당 노드보다 작은 값, 오른쪽 노드에는 해당 노드보다 큰값을 배치하는 조건이 있는 트리

주요용도 : 데이터 검색(탐색)
장점 : 탐색 속도를 개선할 수 있음
단점 :

이진트리와 정렬된 배열간의 탐색 비교