람다식은 Java8에 도입되었고,
함수형 프로그래밍 구조를 다룰때 개발자가 자바 코드 작성을 하는데 변화를 가져왔어요.

@FunctionalInterface
단일 메서드 인터페이스(함수형 인터페이스)
인터페이스가 단 하나의 추상메소드를 가지고 있다.

인스턴스를 보다 명확하고 간결하게 표현할 수 있는 메소드를 제공합니다.

---------------------------------------------------------------------------------------
정의
람다 표현식은 함수형 인터페이스를 인스턴스화 하는데 사용되는 익명함수
자바에서는 함수형 인터페이스는 하나의 추상메서드만 포함하는 인터페이스이다.
람다 구현식은 이 단일 메서드의 구현을 제공할 수 있어, 보다 간결하고 통합된 코드 베이스를 가능하게 한다.

---------------------------------------------------------------------------------------
함수형 인터페이스
자바는 람다 표현식으로 구현할 수 있는 타입을 정의하기 위해
함수형 인터페이스 개념을 사용한다.

java.util.function 패키지에서 다양한 수와 타입의 인수를 받을 수 있는 함수형 인터페이스를 제공하고 있다.

주요 함수형 인터페이스
1. Predicate<T> : 하나의 인수에 대한 boolean 값을 가지는 함수
   Predicate<String> isEmpty = str-> str.isEmpty();

2. Function<T,R> : T타입의 인수를 받아 R타입의 결과를 반환하는 함수
   Function<String,Integer> length = str-> str.length();

3. Consumer<T> : 단일 입력을 받아 수락(사용)하고 결과를 반환하지 않는 함수

4. Suppiler<T> : 값을 반환하는 메서드를 제공하는 결과의 공급자 함수
   Suppiler<String> greet = ()->"Hello , lambda";

5. BiFunction<T,U,R> : 두개의 아규먼트를 받아 결과를 생성하는 함수


간결한 (보일러플레이트 코드를 줄여준다.) 별도의 클래스나 익명클래스를 만들 필요없이
간단한 콜백이나 함수형 인터페이스를 구현할 수 있게 한다.